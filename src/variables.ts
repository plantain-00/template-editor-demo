// @ts-nocheck
/**
 * This file is generated by 'file2variable-cli'
 * It is not mean to be edited by hand
 */
import { createBlock as _createBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, renderList as _renderList, resolveComponent as _resolveComponent, toDisplayString as _toDisplayString, vModelText as _vModelText, vShow as _vShow, withDirectives as _withDirectives } from 'vue'
// tslint:disable
/* eslint-disable */

export function appPanelTemplateHtml(_ctx, _cache) {
  return (_openBlock(), _createBlock("div", { style: {"display":"flex","align-items":"center","height":"50px"} }, [
    _withDirectives(_createVNode("input", {
      type: "text",
      style: {"width":"80px"},
      "onUpdate:modelValue": _cache[1] || (_cache[1] = $event => (_ctx.styleGuideKey = $event))
    }, null, 512 /* NEED_PATCH */), [
      [_vModelText, _ctx.styleGuideKey]
    ]),
    _createVNode("button", {
      onClick: _cache[2] || (_cache[2] = $event => (_ctx.loadStyleGuide()))
    }, "load style guide"),
    (_ctx.appState.debug)
      ? (_openBlock(), _createBlock("button", {
          key: 0,
          onClick: _cache[3] || (_cache[3] = $event => (_ctx.saveStyleGuide()))
        }, "save style guide"))
      : _createCommentVNode("v-if", true),
    _withDirectives(_createVNode("input", {
      type: "text",
      style: {"width":"120px"},
      "onUpdate:modelValue": _cache[4] || (_cache[4] = $event => (_ctx.templateModelKey = $event))
    }, null, 512 /* NEED_PATCH */), [
      [_vModelText, _ctx.templateModelKey]
    ]),
    _createVNode("button", {
      onClick: _cache[5] || (_cache[5] = $event => (_ctx.loadTemplateModel()))
    }, "load template model"),
    (_ctx.appState.debug)
      ? (_openBlock(), _createBlock("button", {
          key: 1,
          onClick: _cache[6] || (_cache[6] = $event => (_ctx.saveTemplateModel()))
        }, "save template model"))
      : _createCommentVNode("v-if", true),
    _createVNode("button", {
      onClick: _cache[7] || (_cache[7] = $event => (_ctx.editTemplateModel()))
    }, "edit template model"),
    _createVNode("button", {
      onClick: _cache[8] || (_cache[8] = $event => (_ctx.precompile()))
    }, "precompile"),
    _createVNode("button", {
      onClick: _cache[9] || (_cache[9] = $event => (_ctx.generate()))
    }, _toDisplayString(_ctx.appState.graphicCanvasState ? 'back to template' : 'generate graphic'), 1 /* TEXT */),
    _createVNode("button", {
      onClick: _cache[10] || (_cache[10] = $event => (_ctx.runTests(false)))
    }, "run tests"),
    _createVNode("button", {
      onClick: _cache[11] || (_cache[11] = $event => (_ctx.runTests(true)))
    }, "update tests")
  ]))
}
export function indexTemplateHtml(_ctx, _cache) {
  const _component_app_panel = _resolveComponent("app-panel")
  const _component_template_model_editor = _resolveComponent("template-model-editor")
  const _component_template_editor = _resolveComponent("template-editor")

  return (_openBlock(), _createBlock("div", { style: {"display":"flex","flex-direction":"column"} }, [
    _createVNode("div", { style: {"height":"50px"} }, [
      _createVNode(_component_app_panel, { "app-state": _ctx.appState }, null, 8 /* PROPS */, ["app-state"]),
      _createVNode(_component_template_model_editor, { "app-state": _ctx.appState }, null, 8 /* PROPS */, ["app-state"])
    ]),
    (_ctx.appState.graphicCanvasState)
      ? (_openBlock(), _createBlock(_component_template_editor, {
          key: 0,
          "canvas-state": _ctx.appState.graphicCanvasState
        }, null, 8 /* PROPS */, ["canvas-state"]))
      : _createCommentVNode("v-if", true),
    _withDirectives(_createVNode(_component_template_editor, {
      "canvas-state": _ctx.appState.canvasState
    }, null, 8 /* PROPS */, ["canvas-state"]), [
      [_vShow, !_ctx.appState.graphicCanvasState]
    ])
  ]))
}
export const styleguideSchemaJson = {
    "$ref": "#/definitions/StyleGuide",
    "definitions": {
        "StyleGuide": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "templates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Template"
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/StyleGuideVariable"
                        }
                    }
                },
                "collections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StyleGuideCollection"
                    }
                },
                "constrains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GenerationTest"
                    }
                }
            },
            "required": [
                "name",
                "templates"
            ],
            "additionalProperties": false
        },
        "Template": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TemplateContent"
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "integer"
                },
                "width": {
                    "type": "number"
                },
                "height": {
                    "type": "number"
                },
                "widthExpression": {
                    "type": "string"
                },
                "heightExpression": {
                    "type": "string"
                },
                "widthExpressionId": {
                    "type": "string"
                },
                "heightExpressionId": {
                    "type": "string"
                },
                "display": {
                    "type": "string",
                    "const": "flex"
                },
                "flexDirection": {
                    "type": "string",
                    "enum": [
                        "row",
                        "column"
                    ]
                },
                "justifyContent": {
                    "type": "string",
                    "enum": [
                        "start",
                        "end",
                        "center",
                        "between"
                    ]
                },
                "alignItems": {
                    "type": "string",
                    "enum": [
                        "start",
                        "end",
                        "center"
                    ]
                },
                "marginLeft": {
                    "type": "number"
                },
                "marginRight": {
                    "type": "number"
                },
                "marginTop": {
                    "type": "number"
                },
                "marginBottom": {
                    "type": "number"
                }
            },
            "required": [
                "id",
                "contents",
                "x",
                "y",
                "width",
                "height"
            ],
            "additionalProperties": false
        },
        "TemplateContent": {
            "anyOf": [
                {
                    "$ref": "#/definitions/TemplateTextContent"
                },
                {
                    "$ref": "#/definitions/TemplateImageContent"
                },
                {
                    "$ref": "#/definitions/TemplateColorContent"
                },
                {
                    "$ref": "#/definitions/TemplateReferenceContent"
                },
                {
                    "$ref": "#/definitions/TemplateSnapshotContent"
                }
            ]
        },
        "TemplateTextContent": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string",
                    "const": "text"
                },
                "text": {
                    "type": "string"
                },
                "textExpression": {
                    "type": "string"
                },
                "textExpressionId": {
                    "type": "string"
                },
                "fontFamily": {
                    "type": "string"
                },
                "fontSize": {
                    "type": "number"
                },
                "fontSizeExpression": {
                    "type": "string"
                },
                "fontSizeExpressionId": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "colorExpression": {
                    "type": "string"
                },
                "colorExpressionId": {
                    "type": "string"
                },
                "characters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TextCharacter"
                    }
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "integer"
                },
                "width": {
                    "type": "number"
                },
                "height": {
                    "type": "number"
                },
                "xExpression": {
                    "type": "string"
                },
                "yExpression": {
                    "type": "string"
                },
                "zExpression": {
                    "type": "string"
                },
                "xExpressionId": {
                    "type": "string"
                },
                "yExpressionId": {
                    "type": "string"
                },
                "zExpressionId": {
                    "type": "string"
                },
                "widthExpression": {
                    "type": "string"
                },
                "heightExpression": {
                    "type": "string"
                },
                "widthExpressionId": {
                    "type": "string"
                },
                "heightExpressionId": {
                    "type": "string"
                },
                "if": {
                    "type": "string"
                },
                "ifId": {
                    "type": "string"
                },
                "else": {
                    "type": "boolean",
                    "default": false
                },
                "repeat": {
                    "type": "string"
                },
                "repeatId": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "rotate": {
                    "type": "number",
                    "default": 0
                },
                "rotateExpression": {
                    "type": "string"
                },
                "rotateExpressionId": {
                    "type": "string"
                }
            },
            "required": [
                "kind",
                "text",
                "fontFamily",
                "fontSize",
                "color",
                "x",
                "y",
                "width",
                "height"
            ],
            "additionalProperties": false
        },
        "TextCharacter": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string"
                }
            },
            "required": [
                "text"
            ],
            "additionalProperties": false
        },
        "TemplateImageContent": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string",
                    "const": "image"
                },
                "url": {
                    "type": "string"
                },
                "urlExpression": {
                    "type": "string"
                },
                "urlExpressionId": {
                    "type": "string"
                },
                "opacity": {
                    "type": "number"
                },
                "base64": {
                    "type": "string"
                },
                "blendMode": {
                    "type": "string",
                    "const": "multiply"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "integer"
                },
                "width": {
                    "type": "number"
                },
                "height": {
                    "type": "number"
                },
                "xExpression": {
                    "type": "string"
                },
                "yExpression": {
                    "type": "string"
                },
                "zExpression": {
                    "type": "string"
                },
                "xExpressionId": {
                    "type": "string"
                },
                "yExpressionId": {
                    "type": "string"
                },
                "zExpressionId": {
                    "type": "string"
                },
                "widthExpression": {
                    "type": "string"
                },
                "heightExpression": {
                    "type": "string"
                },
                "widthExpressionId": {
                    "type": "string"
                },
                "heightExpressionId": {
                    "type": "string"
                },
                "if": {
                    "type": "string"
                },
                "ifId": {
                    "type": "string"
                },
                "else": {
                    "type": "boolean",
                    "default": false
                },
                "repeat": {
                    "type": "string"
                },
                "repeatId": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "rotate": {
                    "type": "number",
                    "default": 0
                },
                "rotateExpression": {
                    "type": "string"
                },
                "rotateExpressionId": {
                    "type": "string"
                }
            },
            "required": [
                "kind",
                "url",
                "x",
                "y",
                "width",
                "height"
            ],
            "additionalProperties": false
        },
        "TemplateColorContent": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string",
                    "const": "color"
                },
                "color": {
                    "type": "string"
                },
                "colorExpression": {
                    "type": "string"
                },
                "colorExpressionId": {
                    "type": "string"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "integer"
                },
                "width": {
                    "type": "number"
                },
                "height": {
                    "type": "number"
                },
                "xExpression": {
                    "type": "string"
                },
                "yExpression": {
                    "type": "string"
                },
                "zExpression": {
                    "type": "string"
                },
                "xExpressionId": {
                    "type": "string"
                },
                "yExpressionId": {
                    "type": "string"
                },
                "zExpressionId": {
                    "type": "string"
                },
                "widthExpression": {
                    "type": "string"
                },
                "heightExpression": {
                    "type": "string"
                },
                "widthExpressionId": {
                    "type": "string"
                },
                "heightExpressionId": {
                    "type": "string"
                },
                "if": {
                    "type": "string"
                },
                "ifId": {
                    "type": "string"
                },
                "else": {
                    "type": "boolean",
                    "default": false
                },
                "repeat": {
                    "type": "string"
                },
                "repeatId": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "rotate": {
                    "type": "number",
                    "default": 0
                },
                "rotateExpression": {
                    "type": "string"
                },
                "rotateExpressionId": {
                    "type": "string"
                }
            },
            "required": [
                "kind",
                "color",
                "x",
                "y",
                "width",
                "height"
            ],
            "additionalProperties": false
        },
        "TemplateReferenceContent": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string",
                    "const": "reference"
                },
                "id": {
                    "type": "string"
                },
                "props": {
                    "type": "string"
                },
                "propsIds": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "integer"
                },
                "xExpression": {
                    "type": "string"
                },
                "yExpression": {
                    "type": "string"
                },
                "zExpression": {
                    "type": "string"
                },
                "xExpressionId": {
                    "type": "string"
                },
                "yExpressionId": {
                    "type": "string"
                },
                "zExpressionId": {
                    "type": "string"
                },
                "if": {
                    "type": "string"
                },
                "ifId": {
                    "type": "string"
                },
                "else": {
                    "type": "boolean",
                    "default": false
                },
                "repeat": {
                    "type": "string"
                },
                "repeatId": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "rotate": {
                    "type": "number",
                    "default": 0
                }
            },
            "required": [
                "kind",
                "id",
                "x",
                "y"
            ],
            "additionalProperties": false
        },
        "TemplateSnapshotContent": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string",
                    "const": "snapshot"
                },
                "snapshot": {
                    "$ref": "#/definitions/Template"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "integer"
                },
                "xExpression": {
                    "type": "string"
                },
                "yExpression": {
                    "type": "string"
                },
                "zExpression": {
                    "type": "string"
                },
                "xExpressionId": {
                    "type": "string"
                },
                "yExpressionId": {
                    "type": "string"
                },
                "zExpressionId": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "rotate": {
                    "type": "number",
                    "default": 0
                }
            },
            "required": [
                "kind",
                "snapshot",
                "x",
                "y"
            ],
            "additionalProperties": false
        },
        "StyleGuideVariable": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "value": {}
            },
            "required": [
                "name",
                "value"
            ],
            "additionalProperties": false
        },
        "StyleGuideCollection": {
            "$ref": "#/definitions/StyleGuideColor"
        },
        "StyleGuideColor": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string",
                    "const": "color"
                },
                "color": {
                    "type": "string"
                }
            },
            "required": [
                "kind",
                "color"
            ],
            "additionalProperties": false
        },
        "GenerationTest": {
            "type": "object",
            "properties": {
                "templateId": {
                    "type": "string"
                },
                "case": {},
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Template"
                    }
                }
            },
            "required": [
                "templateId",
                "case"
            ],
            "additionalProperties": false
        }
    }
}
export function templateEditorAlignmentLayerTemplateHtml(_ctx, _cache) {
  return (_openBlock(), _createBlock("div", null, [
    _createVNode("div", { style: _ctx.xStyle }, null, 4 /* STYLE */),
    _createVNode("div", { style: _ctx.yStyle }, null, 4 /* STYLE */)
  ]))
}
export function templateEditorCommonEditorTemplateHtml(_ctx, _cache) {
  return (_ctx.canvasState.commonEditorVisible)
    ? (_openBlock(), _createBlock("div", {
        key: 0,
        style: _ctx.editorStyle
      }, [
        _createVNode("textarea", {
          value: _ctx.value,
          style: {"width":"calc(100% - 40px)","height":"400px","margin-left":"20px","margin-right":"20px"},
          onBlur: _cache[1] || (_cache[1] = (...args) => (_ctx.changeValue(...args)))
        }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value"])
      ], 4 /* STYLE */))
    : _createCommentVNode("v-if", true)
}
export function templateEditorContextMenuTemplateHtml(_ctx, _cache) {
  return (_ctx.canvasState.contextMenu.enabled)
    ? (_openBlock(), _createBlock("div", {
        key: 0,
        onClick: _cache[2] || (_cache[2] = (...args) => (_ctx.close(...args)))
      }, [
        _createVNode("div", { style: _ctx.maskStyle }, null, 4 /* STYLE */),
        _createVNode("div", { style: _ctx.contextMenuStyle }, [
          _createVNode("button", {
            onClick: _cache[1] || (_cache[1] = (...args) => (_ctx.remove(...args)))
          }, "remove"),
          (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.targets, (target) => {
            return (_openBlock(), _createBlock("button", {
              onClick: $event => (_ctx.select(target))
            }, _toDisplayString(_ctx.getTargetDisplayName(target)), 9 /* TEXT, PROPS */, ["onClick"]))
          }), 256 /* UNKEYED_FRAGMENT */))
        ], 4 /* STYLE */)
      ]))
    : _createCommentVNode("v-if", true)
}
export function templateEditorDraggingForSelectionLayerTemplateHtml(_ctx, _cache) {
  return (_ctx.canvasState.isDraggingForSelection)
    ? (_openBlock(), _createBlock("div", {
        key: 0,
        style: _ctx.draggingAreaStyle
      }, null, 4 /* STYLE */))
    : _createCommentVNode("v-if", true)
}
export function templateEditorExpressionEditorTemplateHtml(_ctx, _cache) {
  const _component_json_editor = _resolveComponent("json-editor")

  return (_openBlock(), _createBlock("div", { style: _ctx.editorStyle }, [
    _createVNode(_component_json_editor, {
      schema: _ctx.schema,
      "initial-value": _ctx.ast,
      onUpdateValue: _cache[1] || (_cache[1] = $event => (_ctx.updateValue($event)))
    }, null, 8 /* PROPS */, ["schema", "initial-value"])
  ], 4 /* STYLE */))
}
export function templateEditorHoverLayerTemplateHtml(_ctx, _cache) {
  return (_openBlock(), _createBlock("div", { style: _ctx.canvasStyle }, [
    _createVNode("div", { style: _ctx.styleGuideStyle }, [
      (_ctx.hoverStyle)
        ? (_openBlock(), _createBlock("div", {
            key: 0,
            style: _ctx.hoverStyle
          }, null, 4 /* STYLE */))
        : _createCommentVNode("v-if", true)
    ], 4 /* STYLE */)
  ], 4 /* STYLE */))
}
export function templateEditorMaskLayerTemplateHtml(_ctx, _cache) {
  return (_openBlock(), _createBlock("div", {
    style: _ctx.maskStyle,
    onWheel: _cache[1] || (_cache[1] = (...args) => (_ctx.wheel(...args))),
    onMousedown: _cache[2] || (_cache[2] = (...args) => (_ctx.mousedown(...args))),
    onMouseup: _cache[3] || (_cache[3] = (...args) => (_ctx.mouseup(...args))),
    onMousemove: _cache[4] || (_cache[4] = (...args) => (_ctx.mousemove(...args))),
    onContextmenu: _cache[5] || (_cache[5] = (...args) => (_ctx.contextmenu(...args))),
    onKeydown: _cache[6] || (_cache[6] = (...args) => (_ctx.keydown(...args))),
    tabindex: "0"
  }, null, 36 /* STYLE, HYDRATE_EVENTS */))
}
export function templateEditorOperationPanelTemplateHtml(_ctx, _cache) {
  const _component_expression_input = _resolveComponent("expression-input")

  return (_openBlock(), _createBlock("div", { style: _ctx.panelStyle }, [
    (_ctx.canvasState.styleGuide.selection.kind === 'content')
      ? (_openBlock(), _createBlock("div", { key: 0 }, [
          (_ctx.canvasState.styleGuide.selection.content.kind === 'text')
            ? (_openBlock(), _createBlock("div", { key: 0 }, [
                _createTextVNode(" text "),
                _createVNode(_component_expression_input, {
                  "canvas-state": _ctx.canvasState,
                  literal: _ctx.canvasState.styleGuide.selection.content.text,
                  "literal-type": "text",
                  expression: _ctx.canvasState.styleGuide.selection.content.textExpression,
                  "expression-id": _ctx.canvasState.styleGuide.selection.content.textExpressionId,
                  onChange: _ctx.changeTextExpression
                }, null, 8 /* PROPS */, ["canvas-state", "literal", "expression", "expression-id", "onChange"]),
                _createVNode("br"),
                _createTextVNode(" font family "),
                _createVNode("input", {
                  type: "text",
                  value: _ctx.canvasState.styleGuide.selection.content.fontFamily,
                  onChange: _cache[1] || (_cache[1] = (...args) => (_ctx.changeFontFamily(...args)))
                }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value"]),
                _createVNode("br"),
                _createTextVNode(" font size "),
                _createVNode(_component_expression_input, {
                  "canvas-state": _ctx.canvasState,
                  literal: _ctx.canvasState.styleGuide.selection.content.fontSize,
                  "literal-type": "number",
                  expression: _ctx.canvasState.styleGuide.selection.content.fontSizeExpression,
                  "expression-id": _ctx.canvasState.styleGuide.selection.content.fontSizeExpressionId,
                  onChange: _ctx.changeFontSizeExpression
                }, null, 8 /* PROPS */, ["canvas-state", "literal", "expression", "expression-id", "onChange"]),
                _createVNode("br"),
                _createTextVNode(" color "),
                _createVNode(_component_expression_input, {
                  "canvas-state": _ctx.canvasState,
                  literal: _ctx.canvasState.styleGuide.selection.content.color,
                  "literal-type": "color",
                  expression: _ctx.canvasState.styleGuide.selection.content.colorExpression,
                  "expression-id": _ctx.canvasState.styleGuide.selection.content.colorExpressionId,
                  onChange: _ctx.changeColorExpression
                }, null, 8 /* PROPS */, ["canvas-state", "literal", "expression", "expression-id", "onChange"])
              ]))
            : _createCommentVNode("v-if", true),
          (_ctx.canvasState.styleGuide.selection.content.kind === 'image')
            ? (_openBlock(), _createBlock("div", { key: 1 }, [
                _createTextVNode(" url "),
                _createVNode(_component_expression_input, {
                  "canvas-state": _ctx.canvasState,
                  literal: _ctx.canvasState.styleGuide.selection.content.url,
                  "literal-type": "text",
                  expression: _ctx.canvasState.styleGuide.selection.content.urlExpression,
                  "expression-id": _ctx.canvasState.styleGuide.selection.content.urlExpressionId,
                  onChange: _ctx.changeImageUrlExpression
                }, null, 8 /* PROPS */, ["canvas-state", "literal", "expression", "expression-id", "onChange"]),
                _createVNode("div", null, [
                  _createTextVNode(" opacity "),
                  _createVNode("input", {
                    type: "number",
                    value: _ctx.canvasState.styleGuide.selection.content.opacity,
                    onChange: _cache[2] || (_cache[2] = (...args) => (_ctx.changeOpacity(...args)))
                  }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value"])
                ]),
                _createVNode("div", null, [
                  _createTextVNode(" blend mode "),
                  _createVNode("select", {
                    value: _ctx.canvasState.styleGuide.selection.content.blendMode,
                    onChange: _cache[3] || (_cache[3] = (...args) => (_ctx.changeBlendMode(...args)))
                  }, [
                    _createVNode("option", { value: undefined }),
                    _createVNode("option", { value: "multiply" }, "multiply")
                  ], 40 /* PROPS, HYDRATE_EVENTS */, ["value"])
                ])
              ]))
            : _createCommentVNode("v-if", true),
          (_ctx.canvasState.styleGuide.selection.content.kind === 'color')
            ? (_openBlock(), _createBlock("div", { key: 2 }, [
                _createTextVNode(" color "),
                _createVNode(_component_expression_input, {
                  "canvas-state": _ctx.canvasState,
                  literal: _ctx.canvasState.styleGuide.selection.content.color,
                  "literal-type": "color",
                  expression: _ctx.canvasState.styleGuide.selection.content.colorExpression,
                  "expression-id": _ctx.canvasState.styleGuide.selection.content.colorExpressionId,
                  onChange: _ctx.changeColorExpression
                }, null, 8 /* PROPS */, ["canvas-state", "literal", "expression", "expression-id", "onChange"])
              ]))
            : _createCommentVNode("v-if", true),
          _createVNode("div", null, [
            _createTextVNode(" x "),
            _createVNode(_component_expression_input, {
              "canvas-state": _ctx.canvasState,
              literal: _ctx.canvasState.styleGuide.selection.content.x,
              "literal-type": "number",
              expression: _ctx.canvasState.styleGuide.selection.content.xExpression,
              "expression-id": _ctx.canvasState.styleGuide.selection.content.xExpressionId,
              onChange: _cache[4] || (_cache[4] = $event => (_ctx.changePositionExpression($event, 'x')))
            }, null, 8 /* PROPS */, ["canvas-state", "literal", "expression", "expression-id"])
          ]),
          _createVNode("div", null, [
            _createTextVNode(" y "),
            _createVNode(_component_expression_input, {
              "canvas-state": _ctx.canvasState,
              literal: _ctx.canvasState.styleGuide.selection.content.y,
              "literal-type": "number",
              expression: _ctx.canvasState.styleGuide.selection.content.yExpression,
              "expression-id": _ctx.canvasState.styleGuide.selection.content.yExpressionId,
              onChange: _cache[5] || (_cache[5] = $event => (_ctx.changePositionExpression($event, 'y')))
            }, null, 8 /* PROPS */, ["canvas-state", "literal", "expression", "expression-id"])
          ]),
          _createVNode("div", null, [
            _createTextVNode(" z "),
            _createVNode(_component_expression_input, {
              "canvas-state": _ctx.canvasState,
              literal: _ctx.canvasState.styleGuide.selection.content.z,
              "literal-type": "number",
              expression: _ctx.canvasState.styleGuide.selection.content.zExpression,
              "expression-id": _ctx.canvasState.styleGuide.selection.content.zExpressionId,
              onChange: _cache[6] || (_cache[6] = $event => (_ctx.changePositionExpression($event, 'z')))
            }, null, 8 /* PROPS */, ["canvas-state", "literal", "expression", "expression-id"])
          ]),
          (_ctx.canvasState.styleGuide.selection.content.kind === 'text' || _ctx.canvasState.styleGuide.selection.content.kind === 'image' || _ctx.canvasState.styleGuide.selection.content.kind === 'color')
            ? (_openBlock(), _createBlock("div", { key: 3 }, [
                _createVNode("div", null, [
                  _createTextVNode(" width "),
                  _createVNode(_component_expression_input, {
                    "canvas-state": _ctx.canvasState,
                    literal: _ctx.canvasState.styleGuide.selection.content.width,
                    "literal-type": "number",
                    expression: _ctx.canvasState.styleGuide.selection.content.widthExpression,
                    "expression-id": _ctx.canvasState.styleGuide.selection.content.widthExpressionId,
                    onChange: _cache[7] || (_cache[7] = $event => (_ctx.changeSizeExpression($event, 'width')))
                  }, null, 8 /* PROPS */, ["canvas-state", "literal", "expression", "expression-id"])
                ]),
                _createVNode("div", null, [
                  _createTextVNode(" height "),
                  _createVNode(_component_expression_input, {
                    "canvas-state": _ctx.canvasState,
                    literal: _ctx.canvasState.styleGuide.selection.content.height,
                    "literal-type": "number",
                    expression: _ctx.canvasState.styleGuide.selection.content.heightExpression,
                    "expression-id": _ctx.canvasState.styleGuide.selection.content.heihtExpressionId,
                    onChange: _cache[8] || (_cache[8] = $event => (_ctx.changeSizeExpression($event, 'height')))
                  }, null, 8 /* PROPS */, ["canvas-state", "literal", "expression", "expression-id"])
                ])
              ]))
            : _createCommentVNode("v-if", true),
          _createVNode("div", null, [
            _createTextVNode(" rotate "),
            _createVNode(_component_expression_input, {
              "canvas-state": _ctx.canvasState,
              literal: _ctx.canvasState.styleGuide.selection.content.rotate,
              "literal-type": "number",
              expression: _ctx.canvasState.styleGuide.selection.content.rotateExpression,
              "expression-id": _ctx.canvasState.styleGuide.selection.content.rotateExpressionId,
              onChange: _cache[9] || (_cache[9] = $event => (_ctx.changeRotateExpression($event)))
            }, null, 8 /* PROPS */, ["canvas-state", "literal", "expression", "expression-id"])
          ]),
          _createVNode("div", null, [
            _createTextVNode(" hidden "),
            _createVNode("input", {
              type: "checkbox",
              checked: _ctx.canvasState.styleGuide.selection.content.hidden,
              onChange: _cache[10] || (_cache[10] = (...args) => (_ctx.changeHidden(...args)))
            }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["checked"])
          ]),
          _createVNode("div", null, [
            _createVNode("select", {
              value: _ctx.canvasState.styleGuide.selection.content.else ? 'true' : 'false',
              onChange: _cache[11] || (_cache[11] = (...args) => (_ctx.changeElse(...args)))
            }, [
              _createVNode("option", { value: "false" }, "if"),
              _createVNode("option", { value: "true" }, "else if")
            ], 40 /* PROPS, HYDRATE_EVENTS */, ["value"]),
            _createVNode(_component_expression_input, {
              "canvas-state": _ctx.canvasState,
              expression: _ctx.canvasState.styleGuide.selection.content.if,
              "expression-id": _ctx.canvasState.styleGuide.selection.content.ifId,
              onChange: _ctx.changeIf
            }, null, 8 /* PROPS */, ["canvas-state", "expression", "expression-id", "onChange"])
          ]),
          _createVNode("div", null, [
            _createTextVNode(" repeat "),
            _createVNode(_component_expression_input, {
              "canvas-state": _ctx.canvasState,
              expression: _ctx.repeat.expression,
              "expression-id": _ctx.canvasState.styleGuide.selection.content.repeatId,
              onChange: _ctx.changeRepeatExpression
            }, null, 8 /* PROPS */, ["canvas-state", "expression", "expression-id", "onChange"]),
            _createVNode("input", {
              type: "text",
              value: _ctx.repeat.itemName,
              onChange: _cache[12] || (_cache[12] = (...args) => (_ctx.changeRepeatItemName(...args))),
              placeholder: "item name",
              style: {"width":"150px","margin-left":"25px"}
            }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value"]),
            _createVNode("input", {
              type: "text",
              value: _ctx.repeat.indexName,
              onChange: _cache[13] || (_cache[13] = (...args) => (_ctx.changeRepeatIndexName(...args))),
              placeholder: "index name",
              style: {"width":"50px"}
            }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value"])
          ]),
          (_ctx.canvasState.styleGuide.selection.content.kind === 'reference')
            ? (_openBlock(), _createBlock("div", { key: 4 }, [
                _createTextVNode(" props "),
                _createVNode("span", { style: {"opacity":"0.5"} }, _toDisplayString(_ctx.canvasState.styleGuide.selection.content.props), 1 /* TEXT */),
                (_ctx.parameters)
                  ? (_openBlock(), _createBlock("div", {
                      key: 0,
                      style: {"margin-left":"10px"}
                    }, [
                      (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.parameters, (parameter) => {
                        return (_openBlock(), _createBlock("div", null, [
                          _createTextVNode(_toDisplayString(parameter) + " ", 1 /* TEXT */),
                          _createVNode(_component_expression_input, {
                            "canvas-state": _ctx.canvasState,
                            expression: _ctx.getParameterValue(parameter),
                            "expression-id": _ctx.getParameterExpressionId(parameter),
                            onChange: $event => (_ctx.changeParameterValue($event, parameter))
                          }, null, 8 /* PROPS */, ["canvas-state", "expression", "expression-id", "onChange"])
                        ]))
                      }), 256 /* UNKEYED_FRAGMENT */))
                    ]))
                  : _createCommentVNode("v-if", true)
              ]))
            : _createCommentVNode("v-if", true),
          (_ctx.canvasState.styleGuide.selection.content.kind === 'text' || _ctx.canvasState.styleGuide.selection.content.kind === 'image' || _ctx.canvasState.styleGuide.selection.content.kind === 'color')
            ? (_openBlock(), _createBlock("div", { key: 5 }, [
                _createVNode("button", {
                  onClick: _cache[14] || (_cache[14] = $event => (_ctx.extractAsComponent()))
                }, "extract as component")
              ]))
            : _createCommentVNode("v-if", true)
        ]))
      : _createCommentVNode("v-if", true),
    (_ctx.canvasState.styleGuide.selection.kind === 'template')
      ? (_openBlock(), _createBlock("div", { key: 1 }, [
          _createVNode("div", null, [
            _createTextVNode(" name "),
            _createVNode("input", {
              type: "text",
              value: _ctx.canvasState.styleGuide.selection.template.name,
              onChange: _cache[15] || (_cache[15] = (...args) => (_ctx.changeName(...args)))
            }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value"])
          ]),
          _createVNode("div", null, [
            _createTextVNode(" x "),
            _createVNode("input", {
              type: "number",
              value: _ctx.canvasState.styleGuide.selection.template.x,
              onChange: _cache[16] || (_cache[16] = $event => (_ctx.changePosition($event, 'x')))
            }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value"])
          ]),
          _createVNode("div", null, [
            _createTextVNode(" y "),
            _createVNode("input", {
              type: "number",
              value: _ctx.canvasState.styleGuide.selection.template.y,
              onChange: _cache[17] || (_cache[17] = $event => (_ctx.changePosition($event, 'y')))
            }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value"])
          ]),
          _createVNode("div", null, [
            _createTextVNode(" z "),
            _createVNode("input", {
              type: "number",
              value: _ctx.canvasState.styleGuide.selection.template.z,
              onChange: _cache[18] || (_cache[18] = $event => (_ctx.changePosition($event, 'z')))
            }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value"])
          ]),
          _createVNode("div", null, [
            _createTextVNode(" width "),
            _createVNode(_component_expression_input, {
              "canvas-state": _ctx.canvasState,
              literal: _ctx.canvasState.styleGuide.selection.template.width,
              "literal-type": "number",
              expression: _ctx.canvasState.styleGuide.selection.template.widthExpression,
              "expression-id": _ctx.canvasState.styleGuide.selection.template.widthExpressionId,
              onChange: _cache[19] || (_cache[19] = $event => (_ctx.changeSizeExpression($event, 'width')))
            }, null, 8 /* PROPS */, ["canvas-state", "literal", "expression", "expression-id"])
          ]),
          _createVNode("div", null, [
            _createTextVNode(" height "),
            _createVNode(_component_expression_input, {
              "canvas-state": _ctx.canvasState,
              literal: _ctx.canvasState.styleGuide.selection.template.height,
              "literal-type": "number",
              expression: _ctx.canvasState.styleGuide.selection.template.heightExpression,
              "expression-id": _ctx.canvasState.styleGuide.selection.template.heightExpressionId,
              onChange: _cache[20] || (_cache[20] = $event => (_ctx.changeSizeExpression($event, 'height')))
            }, null, 8 /* PROPS */, ["canvas-state", "literal", "expression", "expression-id"])
          ]),
          _createVNode("div", null, [
            _createTextVNode(" display "),
            _createVNode("select", {
              value: _ctx.canvasState.styleGuide.selection.template.display,
              onChange: _cache[21] || (_cache[21] = $event => (_ctx.changeFlexDisplay($event.target.value)))
            }, [
              _createVNode("option", { value: undefined }),
              _createVNode("option", { value: "flex" }, "flex")
            ], 40 /* PROPS, HYDRATE_EVENTS */, ["value"])
          ]),
          _createVNode("div", null, [
            _createTextVNode(" flex direction "),
            _createVNode("select", {
              value: _ctx.canvasState.styleGuide.selection.template.flexDirection,
              onChange: _cache[22] || (_cache[22] = $event => (_ctx.changeFlexDirection($event.target.value)))
            }, [
              _createVNode("option", { value: "row" }, "row"),
              _createVNode("option", { value: "column" }, "column")
            ], 40 /* PROPS, HYDRATE_EVENTS */, ["value"])
          ]),
          _createVNode("div", null, [
            _createTextVNode(" justify content "),
            _createVNode("select", {
              value: _ctx.canvasState.styleGuide.selection.template.justifyContent,
              onChange: _cache[23] || (_cache[23] = $event => (_ctx.changeFlexJustifyContent($event.target.value)))
            }, [
              _createVNode("option", { value: "start" }, "start"),
              _createVNode("option", { value: "end" }, "end"),
              _createVNode("option", { value: "center" }, "center"),
              _createVNode("option", { value: "between" }, "between")
            ], 40 /* PROPS, HYDRATE_EVENTS */, ["value"])
          ]),
          _createVNode("div", null, [
            _createTextVNode(" align items "),
            _createVNode("select", {
              value: _ctx.canvasState.styleGuide.selection.template.alignItems,
              onChange: _cache[24] || (_cache[24] = $event => (_ctx.changeFlexAlignItems($event.target.value)))
            }, [
              _createVNode("option", { value: "start" }, "start"),
              _createVNode("option", { value: "end" }, "end"),
              _createVNode("option", { value: "center" }, "center")
            ], 40 /* PROPS, HYDRATE_EVENTS */, ["value"])
          ]),
          _createVNode("div", null, [
            _createVNode("button", {
              onClick: _cache[25] || (_cache[25] = $event => (_ctx.renderToImage()))
            }, "render to image"),
            (_ctx.imageUrl)
              ? (_openBlock(), _createBlock("img", {
                  key: 0,
                  src: _ctx.imageUrl,
                  style: {"object-fit":"contain","width":"100%"}
                }, null, 8 /* PROPS */, ["src"]))
              : _createCommentVNode("v-if", true)
          ]),
          _createVNode("div", null, [
            (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.canvasState.styleGuide.selection.template.parameters || [], (parameter, i) => {
              return (_openBlock(), _createBlock("div", null, [
                _createTextVNode(" parameter " + _toDisplayString(i) + " ", 1 /* TEXT */),
                _createVNode("input", {
                  type: "text",
                  value: parameter,
                  onBlur: $event => (_ctx.changeParameter($event, i))
                }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value", "onBlur"])
              ]))
            }), 256 /* UNKEYED_FRAGMENT */)),
            _createVNode("button", {
              onClick: _cache[26] || (_cache[26] = $event => (_ctx.addParameter()))
            }, "add parameter")
          ])
        ]))
      : _createCommentVNode("v-if", true),
    _createVNode("div", null, [
      _createVNode("button", {
        onClick: _cache[27] || (_cache[27] = $event => (_ctx.debug()))
      }, "debug")
    ]),
    _createVNode("div", null, [
      _createVNode("button", {
        onClick: _cache[28] || (_cache[28] = $event => (_ctx.addTemplate()))
      }, "add template"),
      _createVNode("button", {
        onClick: _cache[29] || (_cache[29] = $event => (_ctx.addText()))
      }, "add text"),
      _createVNode("button", {
        onClick: _cache[30] || (_cache[30] = $event => (_ctx.addImage()))
      }, "add image"),
      _createVNode("button", {
        onClick: _cache[31] || (_cache[31] = $event => (_ctx.addColor()))
      }, "add color")
    ]),
    _createVNode("div", null, [
      _createVNode("button", {
        onClick: _cache[32] || (_cache[32] = $event => (_ctx.toggleCommonEditor('variables')))
      }, "edit variables"),
      _createVNode("button", {
        onClick: _cache[33] || (_cache[33] = $event => (_ctx.toggleCommonEditor('collections')))
      }, "edit collections"),
      _createVNode("button", {
        onClick: _cache[34] || (_cache[34] = $event => (_ctx.toggleCommonEditor('constrains')))
      }, "edit constrains")
    ]),
    _createVNode("div", null, [
      _createVNode("button", {
        onClick: _cache[35] || (_cache[35] = $event => (_ctx.recommand()))
      }, "recommand"),
      (_ctx.selectedVariables.length > 0)
        ? (_openBlock(), _createBlock("button", {
            key: 0,
            onClick: _cache[36] || (_cache[36] = $event => (_ctx.applyRecommandResult()))
          }, "apply"))
        : _createCommentVNode("v-if", true),
      (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.recommandResults, (result) => {
        return (_openBlock(), _createBlock("img", {
          src: result.preview,
          onClick: $event => (_ctx.selectVariables(result.variables)),
          style: _ctx.getPreviewStyle(result.variables)
        }, null, 12 /* STYLE, PROPS */, ["src", "onClick"]))
      }), 256 /* UNKEYED_FRAGMENT */))
    ])
  ], 4 /* STYLE */))
}
export function templateEditorRenderLayerTemplateHtml(_ctx, _cache) {
  const _component_template_renderer = _resolveComponent("template-renderer")

  return (_openBlock(), _createBlock("div", { style: _ctx.canvasStyle }, [
    _createVNode("div", { style: _ctx.styleGuideStyle }, [
      (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.canvasState.styleGuide.data.templates, (r) => {
        return (_openBlock(), _createBlock("div", {
          style: _ctx.getTemplateStyle(r)
        }, [
          (r.name)
            ? (_openBlock(), _createBlock("div", {
                key: 0,
                style: _ctx.getNameStyle(r)
              }, _toDisplayString(r.name), 5 /* TEXT, STYLE */))
            : _createCommentVNode("v-if", true),
          _createVNode(_component_template_renderer, {
            template: r,
            "style-guide": _ctx.canvasState.styleGuide.data
          }, null, 8 /* PROPS */, ["template", "style-guide"])
        ], 4 /* STYLE */))
      }), 256 /* UNKEYED_FRAGMENT */))
    ], 4 /* STYLE */)
  ], 4 /* STYLE */))
}
export function templateEditorSelectionLayerTemplateHtml(_ctx, _cache) {
  return (_openBlock(), _createBlock("div", { style: _ctx.canvasStyle }, [
    _createVNode("div", { style: _ctx.styleGuideStyle }, [
      (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.selectionRegions, (r) => {
        return (_openBlock(), _createBlock("div", {
          style: _ctx.getSelectionAreaStyle(r)
        }, null, 4 /* STYLE */))
      }), 256 /* UNKEYED_FRAGMENT */)),
      (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.canResizeRegions, (r) => {
        return (_openBlock(), _createBlock("div", {
          style: _ctx.getResizeStyle(r)
        }, [
          (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.resizeRegions, (r) => {
            return (_openBlock(), _createBlock("div", { style: r }, null, 4 /* STYLE */))
          }), 256 /* UNKEYED_FRAGMENT */))
        ], 4 /* STYLE */))
      }), 256 /* UNKEYED_FRAGMENT */)),
      (_ctx.canRotateRegion)
        ? (_openBlock(), _createBlock("div", {
            key: 0,
            style: _ctx.rotateAreaStyle
          }, [
            _createVNode("div", { style: _ctx.rotateRegion }, null, 4 /* STYLE */),
            _createVNode("div", { style: _ctx.rotateCircleRegion }, null, 4 /* STYLE */)
          ], 4 /* STYLE */))
        : _createCommentVNode("v-if", true)
    ], 4 /* STYLE */)
  ], 4 /* STYLE */))
}
export function templateEditorTemplateEditorTemplateHtml(_ctx, _cache) {
  const _component_layer_panel = _resolveComponent("layer-panel")
  const _component_render_layer = _resolveComponent("render-layer")
  const _component_selection_layer = _resolveComponent("selection-layer")
  const _component_hover_layer = _resolveComponent("hover-layer")
  const _component_dragging_for_selection_layer = _resolveComponent("dragging-for-selection-layer")
  const _component_alignment_layer = _resolveComponent("alignment-layer")
  const _component_mask_layer = _resolveComponent("mask-layer")
  const _component_context_menu = _resolveComponent("context-menu")
  const _component_operation_panel = _resolveComponent("operation-panel")
  const _component_common_editor = _resolveComponent("common-editor")

  return (_openBlock(), _createBlock("div", { style: {"display":"flex"} }, [
    _createVNode("div", { style: _ctx.layerPanelStyle }, [
      _createVNode(_component_layer_panel, { "canvas-state": _ctx.canvasState }, null, 8 /* PROPS */, ["canvas-state"])
    ], 4 /* STYLE */),
    _createVNode("div", { style: _ctx.canvasStyle }, [
      _createVNode(_component_render_layer, { "canvas-state": _ctx.canvasState }, null, 8 /* PROPS */, ["canvas-state"]),
      _createVNode(_component_selection_layer, { "canvas-state": _ctx.canvasState }, null, 8 /* PROPS */, ["canvas-state"]),
      _createVNode(_component_hover_layer, { "canvas-state": _ctx.canvasState }, null, 8 /* PROPS */, ["canvas-state"]),
      _createVNode(_component_dragging_for_selection_layer, {
        "canvas-state": _ctx.canvasState,
        mask: _ctx.canvasState.mask
      }, null, 8 /* PROPS */, ["canvas-state", "mask"]),
      _createVNode(_component_alignment_layer, {
        "style-guide": _ctx.canvasState.styleGuide,
        viewport: _ctx.canvasState.viewport,
        alignment: _ctx.canvasState.alignment
      }, null, 8 /* PROPS */, ["style-guide", "viewport", "alignment"]),
      _createVNode(_component_mask_layer, { "canvas-state": _ctx.canvasState }, null, 8 /* PROPS */, ["canvas-state"]),
      _createVNode(_component_context_menu, { "canvas-state": _ctx.canvasState }, null, 8 /* PROPS */, ["canvas-state"])
    ], 4 /* STYLE */),
    _createVNode("div", { style: _ctx.operationPanelStyle }, [
      _createVNode(_component_operation_panel, { "canvas-state": _ctx.canvasState }, null, 8 /* PROPS */, ["canvas-state"])
    ], 4 /* STYLE */),
    _createVNode(_component_common_editor, { "canvas-state": _ctx.canvasState }, null, 8 /* PROPS */, ["canvas-state"])
  ]))
}
export function templateModelEditorTemplateHtml(_ctx, _cache) {
  const _component_json_editor = _resolveComponent("json-editor")

  return (_ctx.appState.templateModelEditorVisible)
    ? (_openBlock(), _createBlock("div", {
        key: 0,
        style: _ctx.editorStyle
      }, [
        _createVNode(_component_json_editor, {
          schema: _ctx.schema,
          "initial-value": _ctx.appState.templateModel,
          onUpdateValue: _cache[1] || (_cache[1] = $event => (_ctx.updateValue($event)))
        }, null, 8 /* PROPS */, ["schema", "initial-value"]),
        _createVNode("textarea", {
          value: _ctx.templateModel,
          style: {"width":"calc(100% - 40px)","height":"400px","margin-left":"20px","margin-right":"20px"},
          onBlur: _cache[2] || (_cache[2] = (...args) => (_ctx.changeTemplateModel(...args)))
        }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["value"]),
        _createVNode("button", {
          onClick: _cache[3] || (_cache[3] = $event => (_ctx.addAsTestCase()))
        }, "add as test case")
      ], 4 /* STYLE */))
    : _createCommentVNode("v-if", true)
}
export const templateSchemaJson = {
    "$ref": "#/definitions/Template",
    "definitions": {
        "Template": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TemplateContent"
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "integer"
                },
                "width": {
                    "type": "number"
                },
                "height": {
                    "type": "number"
                },
                "widthExpression": {
                    "type": "string"
                },
                "heightExpression": {
                    "type": "string"
                },
                "widthExpressionId": {
                    "type": "string"
                },
                "heightExpressionId": {
                    "type": "string"
                },
                "display": {
                    "type": "string",
                    "const": "flex"
                },
                "flexDirection": {
                    "type": "string",
                    "enum": [
                        "row",
                        "column"
                    ]
                },
                "justifyContent": {
                    "type": "string",
                    "enum": [
                        "start",
                        "end",
                        "center",
                        "between"
                    ]
                },
                "alignItems": {
                    "type": "string",
                    "enum": [
                        "start",
                        "end",
                        "center"
                    ]
                },
                "marginLeft": {
                    "type": "number"
                },
                "marginRight": {
                    "type": "number"
                },
                "marginTop": {
                    "type": "number"
                },
                "marginBottom": {
                    "type": "number"
                }
            },
            "required": [
                "id",
                "contents",
                "x",
                "y",
                "width",
                "height"
            ],
            "additionalProperties": false
        },
        "TemplateContent": {
            "anyOf": [
                {
                    "$ref": "#/definitions/TemplateTextContent"
                },
                {
                    "$ref": "#/definitions/TemplateImageContent"
                },
                {
                    "$ref": "#/definitions/TemplateColorContent"
                },
                {
                    "$ref": "#/definitions/TemplateReferenceContent"
                },
                {
                    "$ref": "#/definitions/TemplateSnapshotContent"
                }
            ]
        },
        "TemplateTextContent": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string",
                    "const": "text"
                },
                "text": {
                    "type": "string"
                },
                "textExpression": {
                    "type": "string"
                },
                "textExpressionId": {
                    "type": "string"
                },
                "fontFamily": {
                    "type": "string"
                },
                "fontSize": {
                    "type": "number"
                },
                "fontSizeExpression": {
                    "type": "string"
                },
                "fontSizeExpressionId": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "colorExpression": {
                    "type": "string"
                },
                "colorExpressionId": {
                    "type": "string"
                },
                "characters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TextCharacter"
                    }
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "integer"
                },
                "width": {
                    "type": "number"
                },
                "height": {
                    "type": "number"
                },
                "xExpression": {
                    "type": "string"
                },
                "yExpression": {
                    "type": "string"
                },
                "zExpression": {
                    "type": "string"
                },
                "xExpressionId": {
                    "type": "string"
                },
                "yExpressionId": {
                    "type": "string"
                },
                "zExpressionId": {
                    "type": "string"
                },
                "widthExpression": {
                    "type": "string"
                },
                "heightExpression": {
                    "type": "string"
                },
                "widthExpressionId": {
                    "type": "string"
                },
                "heightExpressionId": {
                    "type": "string"
                },
                "if": {
                    "type": "string"
                },
                "ifId": {
                    "type": "string"
                },
                "else": {
                    "type": "boolean",
                    "default": false
                },
                "repeat": {
                    "type": "string"
                },
                "repeatId": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "rotate": {
                    "type": "number",
                    "default": 0
                },
                "rotateExpression": {
                    "type": "string"
                },
                "rotateExpressionId": {
                    "type": "string"
                }
            },
            "required": [
                "kind",
                "text",
                "fontFamily",
                "fontSize",
                "color",
                "x",
                "y",
                "width",
                "height"
            ],
            "additionalProperties": false
        },
        "TextCharacter": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string"
                }
            },
            "required": [
                "text"
            ],
            "additionalProperties": false
        },
        "TemplateImageContent": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string",
                    "const": "image"
                },
                "url": {
                    "type": "string"
                },
                "urlExpression": {
                    "type": "string"
                },
                "urlExpressionId": {
                    "type": "string"
                },
                "opacity": {
                    "type": "number"
                },
                "base64": {
                    "type": "string"
                },
                "blendMode": {
                    "type": "string",
                    "const": "multiply"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "integer"
                },
                "width": {
                    "type": "number"
                },
                "height": {
                    "type": "number"
                },
                "xExpression": {
                    "type": "string"
                },
                "yExpression": {
                    "type": "string"
                },
                "zExpression": {
                    "type": "string"
                },
                "xExpressionId": {
                    "type": "string"
                },
                "yExpressionId": {
                    "type": "string"
                },
                "zExpressionId": {
                    "type": "string"
                },
                "widthExpression": {
                    "type": "string"
                },
                "heightExpression": {
                    "type": "string"
                },
                "widthExpressionId": {
                    "type": "string"
                },
                "heightExpressionId": {
                    "type": "string"
                },
                "if": {
                    "type": "string"
                },
                "ifId": {
                    "type": "string"
                },
                "else": {
                    "type": "boolean",
                    "default": false
                },
                "repeat": {
                    "type": "string"
                },
                "repeatId": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "rotate": {
                    "type": "number",
                    "default": 0
                },
                "rotateExpression": {
                    "type": "string"
                },
                "rotateExpressionId": {
                    "type": "string"
                }
            },
            "required": [
                "kind",
                "url",
                "x",
                "y",
                "width",
                "height"
            ],
            "additionalProperties": false
        },
        "TemplateColorContent": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string",
                    "const": "color"
                },
                "color": {
                    "type": "string"
                },
                "colorExpression": {
                    "type": "string"
                },
                "colorExpressionId": {
                    "type": "string"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "integer"
                },
                "width": {
                    "type": "number"
                },
                "height": {
                    "type": "number"
                },
                "xExpression": {
                    "type": "string"
                },
                "yExpression": {
                    "type": "string"
                },
                "zExpression": {
                    "type": "string"
                },
                "xExpressionId": {
                    "type": "string"
                },
                "yExpressionId": {
                    "type": "string"
                },
                "zExpressionId": {
                    "type": "string"
                },
                "widthExpression": {
                    "type": "string"
                },
                "heightExpression": {
                    "type": "string"
                },
                "widthExpressionId": {
                    "type": "string"
                },
                "heightExpressionId": {
                    "type": "string"
                },
                "if": {
                    "type": "string"
                },
                "ifId": {
                    "type": "string"
                },
                "else": {
                    "type": "boolean",
                    "default": false
                },
                "repeat": {
                    "type": "string"
                },
                "repeatId": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "rotate": {
                    "type": "number",
                    "default": 0
                },
                "rotateExpression": {
                    "type": "string"
                },
                "rotateExpressionId": {
                    "type": "string"
                }
            },
            "required": [
                "kind",
                "color",
                "x",
                "y",
                "width",
                "height"
            ],
            "additionalProperties": false
        },
        "TemplateReferenceContent": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string",
                    "const": "reference"
                },
                "id": {
                    "type": "string"
                },
                "props": {
                    "type": "string"
                },
                "propsIds": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "integer"
                },
                "xExpression": {
                    "type": "string"
                },
                "yExpression": {
                    "type": "string"
                },
                "zExpression": {
                    "type": "string"
                },
                "xExpressionId": {
                    "type": "string"
                },
                "yExpressionId": {
                    "type": "string"
                },
                "zExpressionId": {
                    "type": "string"
                },
                "if": {
                    "type": "string"
                },
                "ifId": {
                    "type": "string"
                },
                "else": {
                    "type": "boolean",
                    "default": false
                },
                "repeat": {
                    "type": "string"
                },
                "repeatId": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "rotate": {
                    "type": "number",
                    "default": 0
                }
            },
            "required": [
                "kind",
                "id",
                "x",
                "y"
            ],
            "additionalProperties": false
        },
        "TemplateSnapshotContent": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string",
                    "const": "snapshot"
                },
                "snapshot": {
                    "$ref": "#/definitions/Template"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "integer"
                },
                "xExpression": {
                    "type": "string"
                },
                "yExpression": {
                    "type": "string"
                },
                "zExpression": {
                    "type": "string"
                },
                "xExpressionId": {
                    "type": "string"
                },
                "yExpressionId": {
                    "type": "string"
                },
                "zExpressionId": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                },
                "rotate": {
                    "type": "number",
                    "default": 0
                }
            },
            "required": [
                "kind",
                "snapshot",
                "x",
                "y"
            ],
            "additionalProperties": false
        }
    }
}
/* eslint-enable */
// tslint:enable
